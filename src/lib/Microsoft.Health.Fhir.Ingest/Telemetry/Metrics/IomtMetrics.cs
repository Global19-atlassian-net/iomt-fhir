// -------------------------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License (MIT). See LICENSE in the repo root for license information.
// -------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using EnsureThat;

namespace Microsoft.Health.Fhir.Ingest.Telemetry
{
    /// <summary>
    /// Defines known metrics and metric dimensions for use in Application Insights
    /// </summary>
    public static class IomtMetrics
    {
        private static string _nameDimension = DimensionNames.Name;
        private static string _categoryDimension = DimensionNames.Category;
        private static string _typeDimension = DimensionNames.ErrorType;
        private static string _stageDimension = DimensionNames.Stage;

        private static Dictionary<string, object> _measurementIngestionLatencyDims = new Dictionary<string, object>
        {
            { _nameDimension, "MeasurementIngestionLatency" },
            { _categoryDimension, Category.Latency },
            { _stageDimension, ConnectorStage.FHIRConversion },
        };

        private static Dictionary<string, object> _measurementGroupDims = new Dictionary<string, object>
        {
            { _nameDimension, "MeasurementGroup" },
            { _categoryDimension, Category.Traffic },
            { _stageDimension, ConnectorStage.FHIRConversion },
        };

        private static Dictionary<string, object> _measurementDims = new Dictionary<string, object>
        {
            { _nameDimension, "Measurement" },
            { _categoryDimension, Category.Traffic },
            { _stageDimension, ConnectorStage.FHIRConversion },
        };

        private static Dictionary<string, object> _deviceEventDims = new Dictionary<string, object>
        {
            { _nameDimension, "DeviceEvent" },
            { _categoryDimension, Category.Traffic },
            { _stageDimension, ConnectorStage.Normalization },
        };

        private static Dictionary<string, object> _normalizedEventDims = new Dictionary<string, object>
        {
            { _nameDimension, "NormalizedEvent" },
            { _categoryDimension, Category.Traffic },
            { _stageDimension, ConnectorStage.Normalization },
        };

        private static Dictionary<string, object> _deviceEventProcessingLatencyDims = new Dictionary<string, object>
        {
            { _nameDimension, "DeviceEventProcessingLatency" },
            { _categoryDimension, Category.Latency },
            { _stageDimension, ConnectorStage.Normalization },
        };

        /// <summary>
        /// The latency between event ingestion and output to FHIR processor.
        /// </summary>
        public static string MeasurementIngestionLatency => nameof(MeasurementIngestionLatency);

        /// <summary>
        /// The number of measurement groups generated by the FHIR processor based on provided input.
        /// </summary>
        public static string MeasurementGroup => nameof(MeasurementGroup);

        /// <summary>
        /// The number of measurement readings to import to FHIR.
        /// </summary>
        public static string Measurement => nameof(Measurement);

        /// <summary>
        /// The number of input events received.
        /// </summary>
        public static string DeviceEvent => nameof(DeviceEvent);

        /// <summary>
        /// The number of normalized events generated for further processing.
        /// </summary>
        public static string NormalizedEvent => nameof(NormalizedEvent);

        /// <summary>
        /// The latency between the event ingestion time and normalization processing. An increase here indicates a backlog of messages to process.
        /// </summary>
        public static string DeviceEventProcessingLatency => nameof(DeviceEventProcessingLatency);

        /// <summary>
        /// An unhandled exception occurred.
        /// </summary>
        public static string UnhandledException => nameof(UnhandledException);

        public static Dictionary<string, object> MeasurementIngestionLatencyDims()
        {
            return _measurementIngestionLatencyDims;
        }

        public static Dictionary<string, object> MeasurementGroupDims()
        {
            return _measurementGroupDims;
        }

        public static Dictionary<string, object> MeasurementDims()
        {
            return _measurementDims;
        }

        public static Dictionary<string, object> DeviceEventDims()
        {
            return _deviceEventDims;
        }

        public static Dictionary<string, object> NormalizedEventDims()
        {
            return _normalizedEventDims;
        }

        public static Dictionary<string, object> DeviceEventProcessingLatencyDims()
        {
            return _deviceEventProcessingLatencyDims;
        }

        public static Dictionary<string, object> UnhandledExceptionDims(Exception ex, string connectorStage)
        {
            EnsureArg.IsNotNull(ex);
            return new Dictionary<string, object>
            {
                { _nameDimension, ex.GetType() },
                { _categoryDimension, Category.Errors },
                { _typeDimension, ErrorType.GeneralError },
                { _stageDimension, connectorStage },
            };
        }

        public static Dictionary<string, object> HandledExceptionDims(string exceptionName, string connectorStage)
        {
            return new Dictionary<string, object>
            {
                { _nameDimension, exceptionName },
                { _categoryDimension, Category.Errors },
                { _typeDimension, ErrorType.GeneralError },
                { _stageDimension, connectorStage },
            };
        }
    }
}
